'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _lodash = require('lodash');

var _prefixMatches = require('prefix-matches');

var _prefixMatches2 = _interopRequireDefault(_prefixMatches);

var _resolveScriptObjectToString = require('./resolve-script-object-to-string');

var _resolveScriptObjectToString2 = _interopRequireDefault(_resolveScriptObjectToString);

var _kebabAndCamelCasify = require('./kebab-and-camel-casify');

var _kebabAndCamelCasify2 = _interopRequireDefault(_kebabAndCamelCasify);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

exports.default = getScriptToRun;


function getScriptToRun(config, input) {
  config = (0, _kebabAndCamelCasify2.default)(config);
  // remove the default objects/strings so we cancheck
  // if the prefix works with another script first
  var defaultlessConfig = removeDefaults((0, _lodash.cloneDeep)(config));
  var scriptToRun = getScript(defaultlessConfig, input);
  if (!(0, _lodash.isUndefined)(scriptToRun) && (0, _lodash.isString)(scriptToRun.script)) {
    return scriptToRun;
  } else {
    // fallback to the defaults if no other script was
    // found with the given input
    return getScript(config, input);
  }
}

function getScript(config, input) {
  // will always return an empty array if no result where found
  var matchingScripts = (0, _prefixMatches2.default)(input, config);

  if (matchingScripts.length !== 0) {
    var script = matchingScripts.reduce(function (script, possibleScript) {
      if (possibleScript[input]) {
        return possibleScript;
      }
      return script;
    });

    var scriptName = Object.keys(script).shift();
    var scriptToRun = script[scriptName];
    if (scriptName && (0, _lodash.isPlainObject)(scriptToRun)) {
      scriptToRun = (0, _resolveScriptObjectToString2.default)(scriptToRun);
    }
    return {
      scriptName,
      script: scriptToRun
    };
  }
  return undefined;
}

function removeDefaults(object) {
  (0, _lodash.each)(object, function (value, key) {
    if (key === 'default') {
      delete object[key];
    } else if ((0, _lodash.isPlainObject)(value)) {
      object[key] = removeDefaults(value);
    }
  });
  return object;
}